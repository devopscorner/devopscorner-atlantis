---
replicaCount: 1

secret:
  enabled: false
  name: "secret-jumppod"
  mountPath: {}
  subPath: {}
  readOnly: true
  data: {}

configMap:
  enabled: false
  name: "config-jumppod"
  mountPath: /app/core/config
  readOnly: true
  data:
    .app.config.json: |-
      {
          "AppName": "Jumppods Service",
          "GRPCTimeout": 10,
          "CacheExpiry": 300,
          "CacheCleanup": 600,
          "DefaultPageLimit": 3,
          "ClientTimeout": 10
      }

image:
  repository: devopscorner/cicd
  pullPolicy: IfNotPresent
  tag: "alpine"

imagePullSecrets: []

nameOverride: "dci-jumppod"
fullnameOverride: "dci-jumppod"

serviceAccount:
  create: true
  annotations: {}
  name: dci-jumppod
  namespace: devops-tools

## Persist data to a persistent volume
persistence:
  type: nfs  # Can be nfs, hostPath, awsEbs, azureDisk, etc.
  enabled: true
  storageClass: "nfs-client"
  accessMode: ReadWriteOnce
  persistentVolumeReclaimPolicy: "Retain"
  capacity: 500Mi
  size: 50Mi
  annotations: {}
  selector: {}
  mountPath: "/dci"
  nfs:
    server: fs-0bdc5e0a5f927e662.efs.ap-southeast-3.amazonaws.com
    path: "/dci/jumppod"

service:
  enabled: true
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: ssh
      port: 2222
      targetPort: 22
      protocol: TCP

containers:
  ports:
    - name: http
      containerPort: 80
      protocol: TCP
    - name: ssh
      containerPort: 22
      protocol: TCP

ingress:
  enabled: true
  ingressName: dci-staging-jumppod-ingress
  ingressClassName: nginx
  annotations:
    ingress.kubernetes.io/ssl-passthrough: "true"
    ingress.kubernetes.io/whitelist-source-range: "10.103.0.0/16"
    kubernetes.io/ingress.allow-http: "false"
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - Jumppods"
    nginx.ingress.kubernetes.io/auth-secret: "dci-auth"
    nginx.ingress.kubernetes.io/auth-type: "basic"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/cors-allow-headers: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "*"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
  hosts:
    - host: jumppod.devopscorner.id
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dci-jumppod
                port:
                  number: 80
  # tls: []
  tls:
    - secretName: tls-atlantis-devopscorner
      hosts:
        - jumppod.devopscorner.id
  extraPaths: []

application:
  enabled: true
  env:
    - name: HELM_TEMPLATE_NAME
      value: jumppod

envFrom:
  enabled: false

resources:
  limits:
    cpu: 200m
    memory: 200Mi
  requests:
    cpu: 140m
    memory: 170Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:
  enabled: true
  select:
    node: "dci-app" # DEV/UAT Cluster

tolerations: []

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

livenessProbe: {}

readinessProbe: {}

affinity: {}

securityContext: {}

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    partition: 0